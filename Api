okapi

controller.cs
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.IO;
using System.Text;
using System.Threading.Tasks;

namespace YourNamespace.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CsvController : ControllerBase
    {
        [HttpPost("upload")]
        public async Task<IActionResult> UploadCsv(IFormFile file)
        {
            if (file == null || file.Length == 0)
            {
                return BadRequest("No file uploaded.");
            }

            string csvContent;
            using (var reader = new StreamReader(file.OpenReadStream(), Encoding.UTF8))
            {
                csvContent = await reader.ReadToEndAsync();
            }

            // Return the CSV as a string
            return Ok(csvContent);
        }
    }
}



program.cs
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

app.UseHttpsRedirection();
app.UseAuthorization();

app.MapControllers();

app.Run();


end point in swagger 
POST /api/csv/upload




using Microsoft.AspNetCore.Mvc;
using System.IO;
using System.Text;
using System.Threading.Tasks;

namespace YourNamespace.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CsvController : ControllerBase
    {
        [HttpGet("read")]
        public async Task<ActionResult<string>> ReadCsv()
        {
            string filePath = Path.Combine(Directory.GetCurrentDirectory(), "Data", "sample.csv");

            if (!System.IO.File.Exists(filePath))
            {
                return NotFound("CSV file not found.");
            }

            string csvContent;
            using (var reader = new StreamReader(filePath, Encoding.UTF8))
            {
                csvContent = await reader.ReadToEndAsync();
            }

            return Ok(csvContent);
        }
    }
}


Sonu is an aspiring DevOps engineer passionate about building efficient, scalable, and automated systems. With strong skills in AWS cloud computing, Linux administration, and containerization using Docker, he is eager to bridge the gap between development and operations. Known for his problem-solving mindset, Sonu thrives in fast-paced environments and continuously explores modern tools to streamline workflows. Beyond technical expertise, he values collaboration, communication, and team bonding, recognizing that success in DevOps relies on collective effort. With a commitment to learning and innovation, Sonu aims to contribute to reliable, secure, and high-performing infrastructure solutions.
csv.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class CsvService {
  private baseUrl = 'https://crmlite-iv2.dev.echonet/public/TestApi';

  constructor(private http: HttpClient) {}

  // API returns string, so use responseType: 'text'
  getCsvData(): Observable<string> {
    return this.http.get(`${this.baseUrl}/api/CSV/read`, { responseType: 'text' });
  }
}


I am pleased to refer Kiran, a highly driven and technically strong engineering student from Chandigarh University. She has hands-on experience in building impactful projects like a geo-location-based Future of Retail system, an AR-powered try-on feature, and a smart flight navigation tool leveraging A* and real-time APIs. With internships in Python development and blockchain, she has demonstrated adaptability across diverse domains. Skilled in C++, Java, Python, web development, and databases, Kiran also brings leadership qualities as an NCC Best Cadet and national-level athlete. Her strong problem-solving abilities and project expertise make her a valuable candidate.

app.compoent.ts
import { Component, OnInit, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CsvService } from './services/csv.service';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './app.html',
  styleUrls: ['./app.css']
})
export class App implements OnInit {
  protected readonly title = signal('CSV Reader');
  csvData: string | null = null;

  constructor(private csvService: CsvService) {}

  ngOnInit(): void {
    this.csvService.getCsvData().subscribe({
      next: (data: string) => {
        this.csvData = data;
        console.log('API Response (string):', data);
      },
      error: (err: any) => {
        console.error('API Error:', err);
      }
    });
  }
}

<div style="text-align:center; margin-top:20px;">
  <h1>{{ title() }}</h1>

  <div *ngIf="csvData; else loading">
    <h3>CSV Data (Raw String):</h3>
    <pre>{{ csvData }}</pre>
  </div>

  <ng-template #loading>
    <p>Loading data from API...</p>
  </ng-template>
</div>

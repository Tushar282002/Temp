// Component Template (HTML)
<div class="mb-2 form-group">
  <mat-form-field appearance="outline" class="w-100">
    <mat-label>{{ label }}</mat-label>
    <mat-select 
      [id]="id" 
      [(ngModel)]="selectedValue"
      (selectionChange)="onItemSelectionChange($event.value)"
      [disabled]="disabled"
      [placeholder]="placeholder"
      class="custom-mat-select">
      
      <mat-option *ngFor="let item of items" [value]="item">
        {{ getDisplayValue(item) }}
      </mat-option>
    </mat-select>
  </mat-form-field>
</div>

<!-- Component Styles (CSS/SCSS) -->
<style>
/* Custom styling for mat-select options */
::ng-deep .custom-mat-select .mat-mdc-option:hover {
  background-color: #4caf50 !important; /* Green background on hover */
  color: white !important;
}

::ng-deep .custom-mat-select .mat-mdc-option.mdc-list-item--selected {
  background-color: #388e3c !important; /* Darker green for selected item */
  color: white !important;
}

::ng-deep .custom-mat-select .mat-mdc-option {
  transition: background-color 0.2s ease, color 0.2s ease;
}

/* Optional: Style the form field */
::ng-deep .mat-mdc-form-field {
  width: 100%;
}

::ng-deep .mat-mdc-form-field.mat-form-field-appearance-outline .mat-mdc-form-field-outline {
  color: #ccc;
}

::ng-deep .mat-mdc-form-field.mat-form-field-appearance-outline.mat-focused .mat-mdc-form-field-outline {
  color: #4caf50;
}
</style>

// Component TypeScript
import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-custom-dropdown',
  templateUrl: './custom-dropdown.component.html',
  styleUrls: ['./custom-dropdown.component.scss']
})
export class CustomDropdownComponent {
  @Input() id: string = '';
  @Input() label: string = '';
  @Input() placeholder: string = '';
  @Input() items: any[] = [];
  @Input() disabled: boolean = false;
  @Input() selectedValue: any;
  
  @Output() selectedValueChange = new EventEmitter<any>();

  onItemSelectionChange(value: any): void {
    this.selectedValue = value;
    this.selectedValueChange.emit(value);
  }

  getDisplayValue(item: any): string {
    // Your existing logic for displaying item values
    return typeof item === 'object' ? item.name || item.label || item.toString() : item;
  }
}

// Module imports needed
import { MatSelectModule } from '@angular/material/select';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { FormsModule } from '@angular/forms';

// Add these to your module imports array:
// MatSelectModule, MatFormFieldModule, MatInputModule, FormsModule
